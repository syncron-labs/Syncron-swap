const { getUncollectedFees } = require("./uncollected_fees");
const {
  getTokenAmountsTheirs,
  getTokenAmountsOurs,
} = require("./liquidity_amount");

// liquidity token amount
const currentTick = -108166; // slot0 tick
const tickLower = -887200;
const tickUpper = 887200;
const liquidity = Number(1952931264130274449n);
const sqrtPriceX96 = Number(354994108308571189386340633n);

// getTokenAmountsOurs(liquidity, sqrtPriceX96, tickLower, tickUpper, 18, 18);
// console.log('=======');
// getTokenAmountsTheirs(liquidity, sqrtPriceX96, tickLower, tickUpper, 18, 18);

// uncollected fee
const { Token } = require("@uniswap/sdk-core");

const SupportedChainId = {
  GOERLI: 5,
  SEPOLIA: 11155111,
};

const POSITION_CONTRACT_ADDRESS = "0x1238536071E1c677A632429e3655c799b22cDA52";

const POOL_FACTORY_ADDRESS =
  // '0x1F98431c8aD98523631AE4a59f267346ea31F984'
  "0x0227628f3F023bb0B980b67D528571c95c6DaC1c"; //sepolia

const WETH_CONTRACT_ADDRESS =
  // '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'
  "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14"; //sepolia

const WETH_TOKEN = new Token(
  SupportedChainId.SEPOLIA,
  WETH_CONTRACT_ADDRESS,
  18,
  "WETH",
  "Wrapped Ether",
);

const DKFT20_TOKEN = new Token(
  // SupportedChainId.GOERLI,
  // '0x2b669B8dF849a250CB3D228C80CcF21D02F4C5dF',
  SupportedChainId.SEPOLIA,
  "0x0228A456B4719Dd584230202b9FF47c986Ad7893",
  18,
  "DKFT20",
  "DK Free Token",
);

const { FeeAmount } = require("@uniswap/v3-sdk");
const { noExponents, getPriceFromTick } = require("./corefunctions");
const wallet_address = "0x9908CbCb070d1ed8d8f2c064b281D3029545b185";
const nft_token_id = 7976;
// const wallet_address = '0x31d4Ae75Cd68f3eaEfAa8b77fF1bc505FBC32184';
// const nft_token_id = 7884;

// getUncollectedFees(
//   DKFT20_TOKEN,
//   WETH_TOKEN,
//   FeeAmount.MEDIUM,
//   POOL_FACTORY_ADDRESS,
//   POSITION_CONTRACT_ADDRESS,
//   nft_token_id,
//   wallet_address,
//   wallet_address,
// );

// console.log(noExponents(getPriceFromTick(-887270)));
// console.log(noExponents(getPriceFromTick(887270)));

const { ethers } = require("ethers");

const decodeMulticall = (abi, calls) => {
  const abiInterface = new ethers.utils.Interface(abi);
  return calls.map((call) => {
    try {
      const func = call.slice(0, 10);
      const decodedArgs = abiInterface.decodeFunctionData(func, call);
      const functionName = abiInterface.getFunction(func).name;
      console.log({ name: functionName, args: decodedArgs });
    } catch (e) {
      console.error("error: ", e);
    }
  });
};

/** decoding multicall **/
const NonfungiblePositionManagerABI = require("@uniswap/v3-periphery/artifacts/contracts/interfaces/INonfungiblePositionManager.sol/INonfungiblePositionManager.json");
const Web3 = require("web3").Web3;
const web3 = new Web3();
const calldata =
  "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008413ead5620000000000000000000000005c8cd1c2f2997f7a041026cc29de8177b4c6d8ec00000000000000000000000089e54f174ca5ff39cf53ab58004158e2ca012eac0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000035f2482336c0d4c2ba6e94faa1d66f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164883164560000000000000000000000005c8cd1c2f2997f7a041026cc29de8177b4c6d8ec00000000000000000000000089e54f174ca5ff39cf53ab58004158e2ca012eac0000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2764c00000000000000000000000000000000000000000000000000000000000a11a8000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000a56d35c029fd16645e079000000000000000000000000000000000000000000000000000000e840308c030000000000000000000000000000000000000000000a503344abc0fbe23670910000000000000000000000005a2b5cb4ce921abd65f0c66c2c839894bfc2076c000000000000000000000000000000000000000000000000000000006244356a00000000000000000000000000000000000000000000000000000000";
// const calldata = "0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008413ead5620000000000000000000000000228a456b4719dd584230202b9ff47c986ad7893000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000019e7c6e43390b76753a1800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164883164560000000000000000000000000228a456b4719dd584230202b9ff47c986ad7893000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000001f4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761a00000000000000000000000000000000000000000000000000000000000d89e60000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009908cbcb070d1ed8d8f2c064b281d3029545b1850000000000000000000000000000000000000000000000000000000065d3381c00000000000000000000000000000000000000000000000000000000";

let calls = web3.eth.abi.decodeParameter("bytes[]", calldata);
// decodeMulticall(NonfungiblePositionManagerABI.abi, calls);
/** **/

/** decoding universal route execute fn **/

const abiCoder = new ethers.utils.AbiCoder();

function extractPathFromV3(fullPath, reverse = false) {
  const fullPathWithoutHexSymbol = fullPath.substring(2);
  let path = [];
  let currentAddress = "";
  for (let i = 0; i < fullPathWithoutHexSymbol.length; i++) {
    currentAddress += fullPathWithoutHexSymbol[i];
    if (currentAddress.length === 40) {
      path.push("0x" + currentAddress);
      i = i + 6;
      currentAddress = "";
    }
  }
  if (reverse) {
    return path.reverse();
  }
  return path;
}

/* swap input decode */
// const inputForFunction = '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000001969368974c05b0000000000000000000000000000000000000000000000000000000a4fac165f84a7c00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000422b669b8df849a250cb3d228c80ccf21d02f4c5df0001f4b4fbf271143f4fbf7b91a5ded31805e42b2208d60001f41f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000000000000000000000000000000000000000';
// const inputForFunction = '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000006c6b935b8bbd40000000000000000000000000000000000000000000000000000000005eb570c1c15a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b2b669b8df849a250cb3d228c80ccf21d02f4c5df0001f4b4fbf271143f4fbf7b91a5ded31805e42b2208d6000000000000000000000000000000000000000000';
// const inputForFunction = '0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000067e25d38b50ac8577500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bb4fbf271143f4fbf7b91a5ded31805e42b2208d60001f42b669b8df849a250cb3d228c80ccf21d02f4c5df000000000000000000000000000000000000000000';
// const decoded = abiCoder.decode(["address", "uint256", "uint256", "bytes", "bool"], inputForFunction);
// console.log('decoded: ', [...decoded, noExponents(Number(decoded[1])), noExponents(Number(decoded[2]))]);
// console.log('encoded path: ', decoded[3]);
// console.log('decoded path: ', extractPathFromV3(decoded[3]));
/*  */

/* wrap unwrap decode */
// unwrap
const inputForFunction =
  "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005eb570c1c15a";
// wrap
// const inputForFunction = '0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000';
const decoded = abiCoder.decode(["address", "uint256"], inputForFunction);
console.log("decoded: ", [...decoded, noExponents(Number(decoded[1]))]);
/*  */

/** **/

/*  */

// increase liquidity
// https://goerli.etherscan.io/tx/0x117f59a92933902f203c1f599c1c7ae7b259ae4760d419e358a3ca964935bb06 tokens
// https://goerli.etherscan.io/tx/0x9ef6807bdfcdbe9cbae1e6f754e8f9f32dcb534305df25c78bc7ee56dbe44bc0 eth

// remove liquidity
// https://goerli.etherscan.io/tx/0x5325548f58aaa1694bd479fbd8852f5b061fc6ff617264b09da1a94e0ed3759c  tokens
// https://goerli.etherscan.io/tx/0x3c69e8cfad725335658af70a92ddcb2ee429c102c1dc3e96bce2c1ff80cf9a7f  eth

// collect fees
// https://goerli.etherscan.io/tx/0x5535726282b1079d10cbe9db971a3ab15f44c42cb835167bdb0309297c78fb5e tokens
// https://goerli.etherscan.io/tx/0xc81312ede4e1b5f072ca5fb7987c5727726965f7003231b9e238ed6b68430496 eth
